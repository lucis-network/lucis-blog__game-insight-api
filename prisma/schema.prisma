generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "fullTextIndex"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/prisma/src/@generated/prisma-nestjs-graphql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GameChartType {
  USERS
  CHANGES
  VOLUME
  TVL
  MCAP
  MARKETCAP
  BALANCE

  @@map("game_chart_types")
}

model GameChart {
  uid        String        @id @default(cuid())
  type       GameChartType
  game_uid   String        @db.VarChar(45)
  series     Json?
  game       Game          @relation(fields: [game_uid], references: [uid])
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@index([game_uid], map: "fk_game_charts_games_idx")
  @@map("game_charts")
}

model GameRanking {
  game_uid   String   @id @default(cuid())
  rank       Int?
  users      Decimal?
  change     Decimal?
  volume     Decimal?
  market_cap Decimal?
  tvl_change Decimal?
  mcap_tvl   Decimal?
  game       Game?    @relation(fields: [game_uid], references: [uid])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  @@map("games_ranking")
}

model GameInsight {
  game_uid             String   @id @default(cuid())
  team_members         Int?
  event_imfomation     String?  @db.Text
  weigtht              Float?
  deployment_team      String?  @db.VarChar(255)
  advisor_team         String?  @db.VarChar(255)
  tech_team            String?  @db.VarChar(255)
  role                 String?  @db.VarChar(255)
  innovation           String?  @db.VarChar(255)
  how_to_play          String?  @db.VarChar(255)
  sword_mechanism      String?  @db.VarChar(255)
  conbustion_mechanism String?  @db.VarChar(255)
  roadmap_detail       String?  @db.VarChar(255)
  phase_detail         String?  @db.Text
  technology_used      String?  @db.Text
  compare_other_game   String?  @db.Text
  is_invest            String?  @db.Text
  roi_per_account      String?  @db.Text
  point                Int?
  parent               Json?
  game                 Game     @relation(fields: [game_uid], references: [uid])
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("games_insight")
}

model Game {
  uid             String           @id @default(cuid())
  name            String?          @db.VarChar(45)
  desc            String?          @db.Text
  desc_team       String?          @db.Text
  logo            String?          @db.VarChar(255)
  website         String?          @db.VarChar(255)
  whitepaper      String?          @db.VarChar(255)
  pitchdeck       String?          @db.VarChar(255)
  trailer_video   String?          @db.VarChar(255)
  facebook        String?          @db.VarChar(255)
  twitter         String?          @db.VarChar(255)
  telegram        String?          @db.VarChar(255)
  youtube         String?          @db.VarChar(255)
  discord         String?          @db.VarChar(255)
  road_map        String?          @db.Text
  game_team       String?          @db.Text
  game_charts     GameChart[]
  game_ranking    GameRanking?
  game_insight    GameInsight?
  game_statistics GameStatistics[]
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  @@fulltext([name])
  @@map("games")
}

model GameStatistics {
  id                       Int       @id @default(autoincrement())
  game_uid                 String    @db.VarChar(255)
  currency_uid             String    @db.VarChar(255)
  is_use                   Boolean   @default(false)
  token_price              Float?
  highest_price            Float?
  highest_yield            Float?
  one_day_up               Float?
  one_day_trading_volum    Float?
  maket_cap                Decimal?
  fully_diluted_market_cap Decimal?
  circulation_supply       Decimal?
  total_supply             Decimal?
  maximum_sypply           Decimal?
  price_fluctuating        Json?
  ido                      Decimal?
  no_tokens                Int?
  ido_time                 DateTime?
  game                     Game      @relation(fields: [game_uid], references: [uid])
  currency                 Currency  @relation(fields: [currency_uid], references: [uid])
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt

  @@index([game_uid], map: "fk_game_statistics_game_idx")
  @@index([currency_uid], map: "fk_game_statistics_currency_idx")
  @@map("games_statistics")
}

enum ChainSymbol {
  ETH
  BSC
  POLYGON
  AVAX
  FLOW
  NEAR
  POLKADOT
  SOLANA
}

model Chain {
  symbol     ChainSymbol @id
  name       String?     @db.VarChar(45)
  icon       String?     @db.VarChar(255)
  chain_id   Int?
  rpc_url    String?
  status     Boolean?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  currencies Currency[]
  // boxPrices  BoxPrice[]

  @@map("chains")
}

model Currency {
  uid            String           @id @default(cuid())
  symbol         String           @db.VarChar(45)
  name           String?          @db.VarChar(45)
  icon           String?          @db.VarChar(255)
  chain_symbol   ChainSymbol
  address        String           @db.VarChar(45)
  owner          String?          @db.VarChar(45)
  chain          Chain            @relation(fields: [chain_symbol], references: [symbol])
  game_statistic GameStatistics[]
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  @@map("currencies")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

model User {
  id         Int        @id @default(autoincrement())
  role       UserRole   @default(CUSTOMER)
  email      String?    @unique @db.VarChar(45)
  code       String     @unique @db.VarChar(45)
  address    String?    @unique @db.VarChar(45)
  name       String?    @unique @db.VarChar(45)
  password   String?    @db.VarChar(255)
  ref_code   String?    @db.VarChar(45)
  status     UserStatus @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@map("users")
}
