# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserGraphql {
  id: ID!
  role: UserRole!
  email: String
  code: String!
  address: String
  name: String
  ref_code: String
  status: UserStatus!
  created_at: DateTime!
  updated_at: DateTime!
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BANNED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ChainCount {
  currencies: Int!
}

type Chain {
  symbol: ChainSymbol!
  name: String
  icon: String
  chain_id: Int
  rpc_url: String
  status: Boolean
  created_at: DateTime!
  updated_at: DateTime!
  currencies: [Currency!]
  _count: ChainCount!
}

enum ChainSymbol {
  ETH
  BSC
  POLYGON
  AVAX
  FLOW
  NEAR
  POLKADOT
  SOLANA
}

type GameChart {
  uid: ID!
  type: GameChartType!
  game_uid: String!
  series: JSON
  game: Game!
  created_at: DateTime!
  updated_at: DateTime!
}

enum GameChartType {
  USERS
  CHANGES
  VOLUME
  TVL
  MCAP
  MARKETCAP
  BALANCE
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type GameRanking {
  game_uid: ID!
  rank: Int
  users: Decimal
  change: Decimal
  volume: Decimal
  market_cap: Decimal
  tvl_change: Decimal
  mcap_tvl: Decimal
  game: Game
  created_at: DateTime!
  updated_at: DateTime!
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type GameInsight {
  game_uid: ID!
  team_members: Int
  event_imfomation: String
  weigtht: Float
  deployment_team: String
  advisor_team: String
  tech_team: String
  role: String
  innovation: String
  how_to_play: String
  sword_mechanism: String
  conbustion_mechanism: String
  roadmap_detail: String
  phase_detail: String
  technology_used: String
  compare_other_game: String
  is_invest: String
  roi_per_account: String
  point: Int
  parent: JSON
  game: Game!
  created_at: DateTime!
  updated_at: DateTime!
}

type GameCount {
  game_charts: Int!
  game_statistics: Int!
}

type Game {
  uid: ID!
  name: String
  desc: String
  desc_team: String
  logo: String
  website: String
  whitepaper: String
  pitchdeck: String
  trailer_video: String
  facebook: String
  twitter: String
  telegram: String
  youtube: String
  discord: String
  road_map: String
  game_team: String
  game_charts: [GameChart!]
  game_ranking: GameRanking
  game_insight: GameInsight
  game_statistics: [GameStatistics!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: GameCount!
}

type GameStatistics {
  id: ID!
  game_uid: String!
  currency_uid: String!
  is_use: Boolean!
  token_price: Float
  highest_price: Float
  highest_yield: Float
  one_day_up: Float
  one_day_trading_volum: Float
  maket_cap: Decimal
  fully_diluted_market_cap: Decimal
  circulation_supply: Decimal
  total_supply: Decimal
  maximum_sypply: Decimal
  price_fluctuating: JSON
  ido: Decimal
  no_tokens: Int
  ido_time: DateTime
  game: Game!
  currency: Currency!
  created_at: DateTime!
  updated_at: DateTime!
}

type CurrencyCount {
  game_statistic: Int!
}

type Currency {
  uid: ID!
  symbol: String!
  name: String
  icon: String
  chain_symbol: ChainSymbol!
  address: String!
  owner: String
  chain: Chain!
  game_statistic: [GameStatistics!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: CurrencyCount!
}

type GUpComingGame {
  uid: ID!
  name: String
  logo: String
  game_statistics: [GameStatistics!]
  created_at: DateTime!
  updated_at: DateTime!
  _count: GameCount!
  currencies: [GCurrencies!]
}

type GCurrencies {
  symbol: String!
  icon: String
  chain_symbol: ChainSymbol!
  created_at: DateTime!
  updated_at: DateTime!
  _count: CurrencyCount!
}

type Query {
  me: UserGraphql
  getUpComingGame: [GUpComingGame!]
}